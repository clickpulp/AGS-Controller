Controller* _controller;
bool _printedInfo = false;

void print_controller_info() {
  if (_controller == null) return;
  System.Log(eLogDebug, "Controller %s %d",  _controller.GetName(), _controller.ButtonCount);
}

String _get_battery_status_text(int batteryStatus) {
  switch (batteryStatus) {
    case eControllerBatteryStatusVeryLow: return "Less than 5%";
    case eControllerBatteryStatusLow: return "Between 5% and 20%";
    case eControllerBatteryStatusMedium: return "Between 20% and 70%";
    case eControllerBatteryStatusFull: return "100%";
    case eControllerBatteryStatusWired: return "Wired";
    case eControllerBatteryStatusMax: return "Max";
  }
  
  return String.Format("Unknown (%d)", batteryStatus);
}

void _update_button_state(Button* btn, bool pressed) {
  if (pressed) btn.TextColor = Game.GetColorFromRGB(0, 255, 0);
  else btn.TextColor = 16;
}

void _update_controller_gui() {
  if (_controller == null) {
    lblControllerName.Text = "No Controller Found";
    lblControllerBattery.Visible = false;
    lblControllerLS.Visible = false;
    lblControllerRS.Visible = false;
    return;
  }
  
  lblControllerName.Text = _controller.GetName();
  lblControllerBattery.Text = String.Format("Battery: %s", _get_battery_status_text(_controller.BatteryStatus()));
  lblControllerBattery.Visible = true;
  
  lblControllerLS.Text = String.Format(
    "%d, %d",
    _controller.GetAxis(eControllerAxisLeftX), 
    _controller.GetAxis(eControllerAxisLeftY)
  );
  lblControllerLS.Visible = true;
  
  lblControllerRS.Text = String.Format(
    "%d, %d",
    _controller.GetAxis(eControllerAxisRightX), 
    _controller.GetAxis(eControllerAxisRightY)
  );
  lblControllerLS.Visible = true;
  
  _update_button_state(btnControllerDL, _controller.IsButtonDown(eControllerButtonDPadLeft));
  _update_button_state(btnControllerDR, _controller.IsButtonDown(eControllerButtonDPadRight));
  _update_button_state(btnControllerDU, _controller.IsButtonDown(eControllerButtonDPadUp));
  _update_button_state(btnControllerDD, _controller.IsButtonDown(eControllerButtonDPadDown));
  
  _update_button_state(btnControllerLS, _controller.IsButtonDown(eControllerButtonLeftStick));
  _update_button_state(btnControllerRS, _controller.IsButtonDown(eControllerButtonRightStick));
  
  _update_button_state(btnControllerL1, _controller.IsButtonDown(eControllerButtonLeftShoulder));
  _update_button_state(btnControllerL2, _controller.IsButtonDown(eControllerButtonPaddle1));
  _update_button_state(btnControllerR1, _controller.IsButtonDown(eControllerButtonRightShoulder));
  _update_button_state(btnControllerR2, _controller.IsButtonDown(eControllerButtonPaddle2));
  
  _update_button_state(btnControllerA, _controller.IsButtonDown(eControllerButtonA));
  _update_button_state(btnControllerB, _controller.IsButtonDown(eControllerButtonB));
  _update_button_state(btnControllerX, _controller.IsButtonDown(eControllerButtonX));
  _update_button_state(btnControllerY, _controller.IsButtonDown(eControllerButtonY));
  
  _update_button_state(btnControllerL, _controller.IsButtonDown(eControllerButtonBack));
  _update_button_state(btnControllerC, _controller.IsButtonDown(eControllerButtonMisc1));
  _update_button_state(btnControllerR, _controller.IsButtonDown(eControllerButtonStart));
}

void game_start() {
  _controller = Controller.Open(0);
  print_controller_info();
}

void repeatedly_execute_always() {
  if (_controller == null) return;
  
  _update_controller_gui();
  
  if (_controller.Plugged() && !_printedInfo) {
    _printedInfo = true;
    print_controller_info();
  }
  
  if (_controller.PressAnyKey() == eControllerButtonInvalid) return;
  
  System.Log(
    eLogDebug,
    "Axis: %d %d %d %d, POV: %d, Buttons: %d",
    _controller.GetAxis(eControllerAxisLeftX), 
    _controller.GetAxis(eControllerAxisLeftY), 
    _controller.GetAxis(eControllerAxisRightX), 
    _controller.GetAxis(eControllerAxisRightY),
    _controller.GetPOV(),
    _controller.PressAnyKey()
  );
}