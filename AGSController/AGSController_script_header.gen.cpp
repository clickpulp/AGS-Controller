/////////////////
// GENERATED BY generate_script_header.py from AGSController_script_header.ash
/////////////////

const char* g_scriptHeader =
    "#define CONTROLLER_AXIS_RANGE_MIN 32767\r\n"
    "#define CONTROLLER_AXIS_RANGE_MAX -32768\r\n"
    "\r\n"
    "/// Buttons available from a game controller\r\n"
    "enum ControllerButton {\r\n"
    "    eControllerButtonInvalid = -1,\r\n"
    "    eControllerButtonA,\r\n"
    "    eControllerButtonB,\r\n"
    "    eControllerButtonX,\r\n"
    "    eControllerButtonY,\r\n"
    "    eControllerButtonBack,\r\n"
    "    eControllerButtonGuide,\r\n"
    "    eControllerButtonStart,\r\n"
    "    eControllerButtonLeftStick,\r\n"
    "    eControllerButtonRightStick,\r\n"
    "    eControllerButtonLeftShoulder,\r\n"
    "    eControllerButtonRightShoulder,\r\n"
    "    eControllerButtonDPadUp,\r\n"
    "    eControllerButtonDPadDown,\r\n"
    "    eControllerButtonDPadLeft,\r\n"
    "    eControllerButtonDPadRight,\r\n"
    "    /// Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button\r\n"
    "    eControllerButtonMisc1,\r\n"
    "    /// Xbox Elite paddle P1 (upper left, facing the back)\r\n"
    "    eControllerButtonPaddle1,\r\n"
    "    /// Xbox Elite paddle P3 (upper right, facing the back)\r\n"
    "    eControllerButtonPaddle2,\r\n"
    "    /// Xbox Elite paddle P2 (lower left, facing the back)\r\n"
    "    eControllerButtonPaddle3,\r\n"
    "    /// Xbox Elite paddle P4 (lower right, facing the back)\r\n"
    "    eControllerButtonPaddle4,\r\n"
    "    /// PS4/PS5 touchpad button\r\n"
    "    eControllerButtonPaddleTouchpad,\r\n"
    "    eControllerButtonMax\r\n"
    "};\r\n"
    "\r\n"
    "/// Axes available from a game controller\r\n"
    "enum ControllerAxis {\r\n"
    "    eControllerAxisInvalid = -1;\r\n"
    "    eControllerAxisLeftX,\r\n"
    "    eControllerAxisLeftY,\r\n"
    "    eControllerAxisRightX,\r\n"
    "    eControllerAxisRightY,\r\n"
    "    eControllerAxisTriggerLeft,\r\n"
    "    eControllerAxisTriggerRight,\r\n"
    "    eControllerAxisMax\r\n"
    "};\r\n"
    "\r\n"
    "enum ControllerPOV {\r\n"
    "  ePOVCenter = 0,\r\n"
    "  ePOVUp = 1,\r\n"
    "  ePOVRight = 2,\r\n"
    "  ePOVUpRight = 3,\r\n"
    "  ePOVDown = 4,\r\n"
    "  ePOVDownRight = 6,\r\n"
    "  ePOVLeft = 8,\r\n"
    "  ePOVUpLeft = 9,\r\n"
    "  ePOVDownLeft = 12\r\n"
    "};\r\n"
    "\r\n"
    "/// Does a single mouse click.\r\n"
    "import void ClickMouse(int button);\r\n"
    "\r\n"
    "/// Returns the number of gamecontrollers found\r\n"
    "import int ControllerCount();\r\n"
    "\r\n"
    "managed struct Controller {\r\n"
    "  readonly int ID;\r\n"
    "  readonly int ButtonCount;\r\n"
    "  readonly int AxesCount;\r\n"
    "  readonly ControllerPOV POV;\r\n"
    "\r\n"
    "  /// Opens specified controller. (0-15)\r\n"
    "  import static Controller* Open(int ID); // $AUTOCOMPLETESTATICONLY$\r\n"
    "\r\n"
    "  /// Closes controller\r\n"
    "  import void Close();\r\n"
    "\r\n"
    "  /// Returns if the controller is currently plugged or not (true / false)\r\n"
    "  import bool Plugged();\r\n"
    "\r\n"
    "  /// Returns the controller name\r\n"
    "  import String GetName();\r\n"
    "\r\n"
    "  /// Returns axis value bynumber. (0-5)\r\n"
    "  import int GetAxis(ControllerAxis axis);\r\n"
    "\r\n"
    "  /// Returns POV value. (0-8)\r\n"
    "  import int GetPOV();\r\n"
    "\r\n"
    "  /// Rumbles the Controller for Duration (in loops). Left and right are motors. Values go from 0 to 65535\r\n"
    "  import void Rumble(int left, int right, int duration);\r\n"
    "\r\n"
    "  /// Returns true when the specified button is currently down.\r\n"
    "  import bool IsButtonDown(ControllerButton button);\r\n"
    "\r\n"
    "  /// Returns the first button the player hits on the controller, otherwise returns -1.\r\n"
    "  import ControllerButton PressAnyKey();\r\n"
    "\r\n"
    "  /// Returns the status of the controller battery. (-1 - 5) UNKNOWN = -1, LESS THAN 5% = 0, LESS THAN 20% = 1, LESS THAN 70% = 2, 100% = 3, WIRED = 4, MAX = 5\r\n"
    "  import int BatteryStatus();\r\n"
    "\r\n"
    "  /// Returns true when the specified button is currently down (single press).\r\n"
    "  import bool IsButtonDownOnce(ControllerButton button);\r\n"
    "};\r\n"
;
